import{_ as i,c as e,o as t,b1 as o}from"./chunks/framework.CBNrOPsJ.js";const c=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"documents/interview/network.md","filePath":"documents/interview/network.md","lastUpdated":1742387780000}'),r={name:"documents/interview/network.md"};function a(T,l,n,p,s,S){return t(),e("div",null,l[0]||(l[0]=[o('<h2 id="在浏览器中输入-url-到页面显示经历了什么" tabindex="-1">在浏览器中输入 url 到页面显示经历了什么？ <a class="header-anchor" href="#在浏览器中输入-url-到页面显示经历了什么" aria-label="Permalink to &quot;在浏览器中输入 url 到页面显示经历了什么？&quot;">​</a></h2><ol><li><p>URL解析 浏览器解析用户输入的URL，分离出协议（如HTTP/HTTPS）、域名、端口、路径等组成部分。</p></li><li><p>DNS解析 浏览器检查本地缓存→系统缓存→路由器缓存→ISP的DNS服务器，最终通过递归或迭代查询将域名转换为服务器IP地址。</p></li><li><p>建立TCP连接 通过“三次握手”（SYN→SYN-ACK→ACK）与服务器建立可靠的TCP连接。若为HTTPS，还需进行TLS握手协商加密。</p></li><li><p>发送HTTP请求 浏览器通过TCP连接发送HTTP请求报文，包含请求方法（GET/POST）、请求头（如User-Agent）及请求体（如POST数据）。</p></li><li><p>服务器处理与响应 服务器接收请求后处理（如读取数据库），返回HTTP响应，包含状态码（如200）、响应头（如Content-Type）及响应体（HTML内容）。</p></li><li><p>浏览器渲染 解析HTML生成DOM树→加载CSS构建CSSOM树→合并为渲染树→计算布局→绘制页面。期间执行JavaScript并加载外部资源（如图片）。</p></li><li><p>断开连接 页面渲染完成后，根据HTTP头（如Connection: keep-alive）决定是否关闭TCP连接。</p></li></ol><p>总结：整个过程涉及网络协议、资源加载和渲染引擎协作，优化关键点包括DNS缓存、TCP复用、减少渲染阻塞（如CSS/JS优化）。</p><h2 id="http-和-https-的区别" tabindex="-1">HTTP 和 HTTPS 的区别 <a class="header-anchor" href="#http-和-https-的区别" aria-label="Permalink to &quot;HTTP 和 HTTPS 的区别&quot;">​</a></h2><ol><li><p>安全性： HTTP：数据明文传输，容易被窃听或篡改。 HTTPS：通过 SSL/TLS 加密传输，数据更安全。</p></li><li><p>协议： HTTP：基于 TCP 协议。 HTTPS：在 TCP 和 HTTP 之间加入 SSL/TLS 层。</p></li><li><p>端口： HTTP：默认端口 80。 HTTPS：默认端口 443。</p></li><li><p>证书： HTTP：不需要证书。 HTTPS：需要 SSL 证书来验证服务器身份。</p></li><li><p>性能： HTTP：性能较好，无加密开销。 HTTPS：因加密和解密，性能略低，但现代优化已缩小差距。</p></li></ol><p>总结： HTTPS 更安全，适合传输敏感信息（如登录、支付），HTTP 适合不敏感的场景。</p><h2 id="什么是跨域请求-你可以通过哪些方法解决跨域问题" tabindex="-1">什么是跨域请求? 你可以通过哪些方法解决跨域问题? <a class="header-anchor" href="#什么是跨域请求-你可以通过哪些方法解决跨域问题" aria-label="Permalink to &quot;什么是跨域请求? 你可以通过哪些方法解决跨域问题?&quot;">​</a></h2><p>跨域请求是指在浏览器中，当一个网页尝试加载来自不同域名下的资源时会发生跨域请求。浏览器的同源策略会阻止跨域请求，以保护用户的安全。跨域请求可以通过以下几种方法解决：</p><ol><li>JSONP (JSON with Padding)：通过动态创建 <code>&lt;script&gt;</code> 标签来实现跨域请求，但只支持GET请求。</li><li>CORS (Cross-Origin Resource Sharing)：服务端设置响应头中的 Access-Control-Allow-Origin 字段来允许跨域请求。</li><li>代理服务器：在同源的服务器端发起请求，然后再将数据传递给客户端，绕过浏览器的同源策略。</li><li>WebSocket：通过WebSocket协议进行跨域通信。</li></ol><ul><li>在使用 vue 开发项目过程中, 可以在 <code>vue.config.js</code> 的 <code>devServer</code> 中配置 <code>proxy</code>, 此时的代理称为正向代理;</li><li>正式环境中可以在 nginx 中配置代理, 此时的代理称为反向代理(比如有一个前端服务, 跑在 5000 端口, 一个后端服务, 跑在 3000 端口, 此时前端请求后端服务会造成跨域, 为了解决这个问题, 可以在 nginx 中配置代理, 添加一个 8000 服务作为中转, 如果路径以 / 开头, 则代理到 5000 端口, 如果路径以 /api 开头, 则代理到 3000 端口. 此时浏览器的 network 中显示的 url 的端口为 8000, 但是实际请求的是 3000 端口, 这种客户端不知道服务端实际请求的是哪个地址就被称为&quot;反向代理&quot;)</li></ul><h2 id="有哪些方法可以优化网站" tabindex="-1">有哪些方法可以优化网站？ <a class="header-anchor" href="#有哪些方法可以优化网站" aria-label="Permalink to &quot;有哪些方法可以优化网站？&quot;">​</a></h2><ol><li><p><strong>压缩和合并资源</strong>：</p><ul><li>压缩 CSS、JavaScript 和图片等静态资源，减小文件大小。</li><li>合并多个 CSS 和 JavaScript 文件，减少HTTP请求次数。</li></ul></li><li><p><strong>使用CDN（内容分发网络）</strong>：</p><ul><li>将静态资源部署到 CDN上，加速资源加载速度，减轻服务器负担。</li></ul></li><li><p><strong>懒加载（Lazy Loading）</strong>：</p><ul><li>仅在用户需要时加载图片、视频或其他资源，减少首次加载时间（比如图片、路由懒加载）。</li></ul></li><li><p><strong>优化图片</strong>：</p><ul><li>使用适当的图片格式（如WebP）和大小，以减少图片加载时间。</li><li>使用 CSS sprites 或 SVG 图像来减少HTTP请求。</li></ul></li><li><p><strong>减少重定向和请求次数</strong>：</p><ul><li>减少重定向，确保页面引用的资源有效且减少不必要的请求。</li></ul></li><li><p><strong>缓存优化</strong>：</p><ul><li>利用浏览器缓存机制，设置合适的缓存头，减少重复加载。</li><li>使用服务端缓存（如 HTTP 缓存、Redis 缓存等）来提高性能。</li></ul></li><li><p><strong>异步加载脚本</strong>：</p><ul><li>使用 async 或 defer 属性加载 JavaScript，避免阻塞页面渲染。</li></ul></li><li><p><strong>减少DOM操作</strong>：</p><ul><li>减少 DOM 操作次数，合并操作，减少重排和重绘。</li></ul></li></ol>',12)]))}const u=i(r,[["render",a]]);export{c as __pageData,u as default};
