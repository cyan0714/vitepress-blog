import{_ as i,c as a,o as t,b1 as h}from"./chunks/framework.CBNrOPsJ.js";const F=JSON.parse('{"title":"Git","description":"","frontmatter":{},"headers":[],"relativePath":"documents/git/git.md","filePath":"documents/git/git.md","lastUpdated":1753068518000}'),n={name:"documents/git/git.md"};function e(l,s,p,k,r,g){return t(),a("div",null,s[0]||(s[0]=[h(`<h1 id="git" tabindex="-1">Git <a class="header-anchor" href="#git" aria-label="Permalink to &quot;Git&quot;">​</a></h1><h2 id="如何创建本地分支" tabindex="-1">如何创建本地分支 <a class="header-anchor" href="#如何创建本地分支" aria-label="Permalink to &quot;如何创建本地分支&quot;">​</a></h2><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 只创建一个分支</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> branch</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">branch-nam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 创建一个分支并切换到该分支</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> checkout</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">branch-nam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><h2 id="如何创建远程分支-并关联本地分支" tabindex="-1">如何创建远程分支, 并关联本地分支 <a class="header-anchor" href="#如何创建远程分支-并关联本地分支" aria-label="Permalink to &quot;如何创建远程分支, 并关联本地分支&quot;">​</a></h2><p>假设当前分支为 master，需要创建的分支是 my-test</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 创建 my-test 分支并进入该分支</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> checkout</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -b</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> my-test</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 将 my-test 分支推送到远程</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> my-test</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 将本地分支 my-test 关联到远程分支 my-test 上, -u 参数允许你在后续提交代码时直接使用 git push</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> branch</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --set-upstream-to=origin/my-test</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ||</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">本地分支</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">名</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 查看远程分支</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> branch</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -a</span></span></code></pre></div><h2 id="git-pull-和-git-push-到指定分支" tabindex="-1">git pull 和 git push 到指定分支 <a class="header-anchor" href="#git-pull-和-git-push-到指定分支" aria-label="Permalink to &quot;git pull 和 git push 到指定分支&quot;">​</a></h2><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># git pull</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pull</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">远程分支</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">名</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">本地分支</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">名</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 将远程指定分支 拉取到 本地指定分支上</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pull</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">远程分支</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">名</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 将远程指定分支 拉取到 本地当前所在分支上</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pull</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 将与本地当前分支同名的远程分支 拉取到 本地当前分支上(需先关联远程分支)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># git push</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">本地分支</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">名</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">远程分支</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">名</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 将本地当前分支 推送到 远程指定分支上</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">本地分支</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">名</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 将本地当前分支 推送到 与本地当前分支同名的远程分支上</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 将本地当前分支 推送到 与本地当前分支同名的远程分支上(需先关联远程分支)</span></span></code></pre></div><h2 id="什么是-detached-head" tabindex="-1">什么是 detached HEAD <a class="header-anchor" href="#什么是-detached-head" aria-label="Permalink to &quot;什么是 detached HEAD&quot;">​</a></h2><p>当 HEAD 指针和当前分支指向的不是同一个 commit 时被称为 detached HEAD ，比如执行 git checkout dbde7c 时，其中 dbde7c 不是最新 commit 节点</p><h2 id="git-reflog-的作用" tabindex="-1">git reflog 的作用？ <a class="header-anchor" href="#git-reflog-的作用" aria-label="Permalink to &quot;git reflog 的作用？&quot;">​</a></h2><p>当误删一个分支后，仍想找回当初误删分支的最新的 commit 节点，可以使用此命令查看对应 SHA1 值，并用 git checkout SHA1 检出对应的 commit 节点，再使用 git checkout -b dev 创建一个新分支，之后再进行合并等操作</p><h2 id="什么是-rebase" tabindex="-1">什么是 rebase <a class="header-anchor" href="#什么是-rebase" aria-label="Permalink to &quot;什么是 rebase&quot;">​</a></h2><p>举个例子: 假如有一个名为 dev 的 git 分支, 如果在 dev 分支上执行 git rebase master 会发生什么? 答: 当在名为 dev 的分支上执行 git rebase master 命令时，Git 会将 dev 分支上的提交按顺序暂时保存起来，然后将 dev 分支回退到 master 分支的最新提交，接着将之前保存的 dev 分支的提交逐个应用到 master 分支上。这个过程会使得 dev 分支的提交历史线性化，看起来好像是在 master 分支上直接进行提交一样。</p><p>注意: 执行 git rebase 命令会改变提交历史，因此在共享的分支上使用 rebase 可能会引起冲突，应该谨慎使用。</p><h2 id="如何知道远程仓库代码有更新" tabindex="-1">如何知道远程仓库代码有更新？ <a class="header-anchor" href="#如何知道远程仓库代码有更新" aria-label="Permalink to &quot;如何知道远程仓库代码有更新？&quot;">​</a></h2><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> remote</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> remote</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> show</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span></span></code></pre></div><h2 id="如何回滚代码" tabindex="-1">如何回滚代码？ <a class="header-anchor" href="#如何回滚代码" aria-label="Permalink to &quot;如何回滚代码？&quot;">​</a></h2><p>分两种情况：</p><ol><li>只 commit 没 push</li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># xxx 为要去到的版本号</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">1.</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> reset</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -soft</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> xxx</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # -soft 意思是不需要再执行 add 命令</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">2.</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> reset</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -mixed</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> xxx</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # -mixed 意思是需要执行 add 再 commit</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">3.</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> reset</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -hard</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> xxx</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # -hard 意思是 xxx 版本的代码全部丢弃</span></span></code></pre></div><ol start="2"><li>已经 push</li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">1.</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> reset</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> —hard</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> xxx</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # xxx 为要去到的版本号，-hard 表示直接从本地代码仓库拉取代码，替换工作区的代码，不会保留之前的提交记录</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">2.</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> revert</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> xxx</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # xxx 为要撤销的版本号，会保留之前的提交记录</span></span></code></pre></div><h2 id="如何建立多个远程仓库" tabindex="-1">如何建立多个远程仓库？ <a class="header-anchor" href="#如何建立多个远程仓库" aria-label="Permalink to &quot;如何建立多个远程仓库？&quot;">​</a></h2><ol><li><p>git remote add xxx(远程仓库名字) 远程仓库地址（如：git remote add github <a href="https://github.com/cyan0714/lottery-machine.git%EF%BC%89" target="_blank" rel="noreferrer">https://github.com/cyan0714/lottery-machine.git）</a> 当想拉取某个远程仓库的代码时：git pull github main --rebase 取消关联某个远程仓库：git remote remove github</p></li><li><p>git remote set-url --add origin <a href="https://github.com/cyan0714/lottery-machine.git" target="_blank" rel="noreferrer">https://github.com/cyan0714/lottery-machine.git</a></p></li></ol><h2 id="如何解决-fatal-refusing-to-merge-unrelated-histories" tabindex="-1">如何解决 fatal: refusing to merge unrelated histories? <a class="header-anchor" href="#如何解决-fatal-refusing-to-merge-unrelated-histories" aria-label="Permalink to &quot;如何解决 fatal: refusing to merge unrelated histories?&quot;">​</a></h2><p>git pull github main --allow-unrelated-histories</p><h2 id="如何解决-there-is-not-anything-to-compare-问题" tabindex="-1">如何解决 There is not anything to compare 问题？ <a class="header-anchor" href="#如何解决-there-is-not-anything-to-compare-问题" aria-label="Permalink to &quot;如何解决 There is not anything to compare 问题？&quot;">​</a></h2><p>原因：提交历史记录不同</p><p>解决方法：</p><p><strong>切换分支至master</strong></p><p>git checkout master</p><p><strong>强制重命名master分支为main分支</strong></p><p>git branch main master -f</p><p><strong>切换分支至main</strong></p><p>git checkout main</p><p><strong>强制推送本地main分支至远程库，并覆盖远程main分支内容</strong></p><p>git push origin main -f</p><h2 id="如何删除已提交到-github-gitlab-等远程仓库的敏感信息" tabindex="-1">如何删除已提交到 github/gitlab 等远程仓库的敏感信息 <a class="header-anchor" href="#如何删除已提交到-github-gitlab-等远程仓库的敏感信息" aria-label="Permalink to &quot;如何删除已提交到 github/gitlab 等远程仓库的敏感信息&quot;">​</a></h2><p>pip install git-filter-repo git filter-repo --replace-text &lt;(echo &quot;old-password==&gt;new-password&quot;) git push origin --force --all</p>`,40)]))}const o=i(n,[["render",e]]);export{F as __pageData,o as default};
