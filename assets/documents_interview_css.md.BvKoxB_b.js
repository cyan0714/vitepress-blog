import{_ as i,c as a,o as t,b1 as n}from"./chunks/framework.CBNrOPsJ.js";const c=JSON.parse('{"title":"CSS 面试题","description":"","frontmatter":{},"headers":[],"relativePath":"documents/interview/css.md","filePath":"documents/interview/css.md","lastUpdated":1749199251000}'),e={name:"documents/interview/css.md"};function l(h,s,d,p,r,k){return t(),a("div",null,s[0]||(s[0]=[n(`<h1 id="css-面试题" tabindex="-1">CSS 面试题 <a class="header-anchor" href="#css-面试题" aria-label="Permalink to &quot;CSS 面试题&quot;">​</a></h1><h2 id="display-none、visibility-hidden、opacity-0-的区别" tabindex="-1">display:none、visibility:hidden、opacity:0 的区别 <a class="header-anchor" href="#display-none、visibility-hidden、opacity-0-的区别" aria-label="Permalink to &quot;display:none、visibility:hidden、opacity:0 的区别&quot;">​</a></h2><h3 id="相同点" tabindex="-1">相同点 <a class="header-anchor" href="#相同点" aria-label="Permalink to &quot;相同点&quot;">​</a></h3><p>都能使元素隐藏</p><h3 id="不同点" tabindex="-1">不同点 <a class="header-anchor" href="#不同点" aria-label="Permalink to &quot;不同点&quot;">​</a></h3><table tabindex="0"><thead><tr><th>属性</th><th>是否占据空间</th><th>子元素继承</th><th>事件绑定</th><th>过渡动画</th><th>回流和重绘</th></tr></thead><tbody><tr><td><code>display:none</code></td><td>否</td><td>否</td><td>否</td><td>否</td><td>会产生回流和重绘</td></tr><tr><td><code>visibility:hidden</code></td><td>是</td><td>会被子元素继承，但是可以给子元素单独设置<code>visibility:visible</code>来显示子元素</td><td>否</td><td>否</td><td>只会引起页面重绘</td></tr><tr><td><code>opacity:0</code></td><td>是</td><td>会被子元素继承，但是不能设置子元素<code>opacity:1</code>来显示子元素</td><td>是</td><td>是</td><td>只会引起页面重绘</td></tr></tbody></table><hr><h2 id="inline-block-and-inline-block-的区别" tabindex="-1">inline, block, and inline-block 的区别 <a class="header-anchor" href="#inline-block-and-inline-block-的区别" aria-label="Permalink to &quot;inline, block, and inline-block 的区别&quot;">​</a></h2><table tabindex="0"><thead><tr><th>元素类型</th><th>换行行为</th><th>宽高设置</th><th>内容容纳</th></tr></thead><tbody><tr><td><strong>Inline元素</strong><br>（内联元素）</td><td>不会导致换行，在同一行内显示</td><td>宽度和高度由内容决定，无法设置固定宽高</td><td>只能容纳文本或其他内联元素，不能容纳块级元素</td></tr><tr><td><strong>Block元素</strong><br>（块级元素）</td><td>会导致换行，每个元素从新的一行开始</td><td>宽度默认为100%，可以设置固定宽高</td><td>可以容纳内联元素和其他块级元素</td></tr><tr><td><strong>Inline-block元素</strong><br>（内联块级元素）</td><td>可以在同一行内显示，不强制换行</td><td>可以设置宽度和高度</td><td>可以容纳其他内联元素和块级元素，类似于块级元素</td></tr></tbody></table><hr><h2 id="回流和重绘区别" tabindex="-1">回流和重绘区别 <a class="header-anchor" href="#回流和重绘区别" aria-label="Permalink to &quot;回流和重绘区别&quot;">​</a></h2><h3 id="定义" tabindex="-1">定义 <a class="header-anchor" href="#定义" aria-label="Permalink to &quot;定义&quot;">​</a></h3><ul><li><strong>回流</strong>：涉及到元素位置、几何属性（width、height、margin、padding）改变时，就会产生回流，开销较大</li><li><strong>重绘</strong>：涉及到元素的视觉样式（如颜色、字体大小）的更新时，就会产生重绘，开销较小</li></ul><h3 id="性能优化建议" tabindex="-1">性能优化建议 <a class="header-anchor" href="#性能优化建议" aria-label="Permalink to &quot;性能优化建议&quot;">​</a></h3><p>为了提升网页性能，应尽量减少回流和重绘的次数。以下是一些优化建议：</p><h4 id="_1-批量修改样式" tabindex="-1">1. 批量修改样式 <a class="header-anchor" href="#_1-批量修改样式" aria-label="Permalink to &quot;1. 批量修改样式&quot;">​</a></h4><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ❌ 不推荐</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">element.style.left </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;10px&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">element.style.top </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;20px&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ✅ 推荐</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">element.classList.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;new-position&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h4 id="_2-使用-transform-和-opacity-进行动画" tabindex="-1">2. 使用 transform 和 opacity 进行动画 <a class="header-anchor" href="#_2-使用-transform-和-opacity-进行动画" aria-label="Permalink to &quot;2. 使用 transform 和 opacity 进行动画&quot;">​</a></h4><p>这些属性不会触发回流，只会引起重绘，性能更优：</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.animated-element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  transition</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: transform </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">s</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ease</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, opacity </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">s</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ease</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.animated-element.active</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  transform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">translateX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  opacity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="_3-使用-will-change-属性" tabindex="-1">3. 使用 will-change 属性 <a class="header-anchor" href="#_3-使用-will-change-属性" aria-label="Permalink to &quot;3. 使用 will-change 属性&quot;">​</a></h4><p>提前告知浏览器哪些元素将会发生变化，以便浏览器进行优化：</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  will-change</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: transform, opacity;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,23)]))}const E=i(e,[["render",l]]);export{c as __pageData,E as default};
