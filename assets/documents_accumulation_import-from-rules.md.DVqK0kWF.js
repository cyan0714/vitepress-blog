import{_ as i,c as a,o as n,b1 as e}from"./chunks/framework.CBNrOPsJ.js";const t="/vitepress-blog/assets/3.Dwqdt8Yx.png",l="/vitepress-blog/assets/4.uqbpArje.png",p="/vitepress-blog/assets/5.aJYfbTbU.png",h="/vitepress-blog/assets/6.C62J7j-l.png",u=JSON.parse('{"title":"Import From 加载规则详解","description":"","frontmatter":{},"headers":[],"relativePath":"documents/accumulation/import-from-rules.md","filePath":"documents/accumulation/import-from-rules.md","lastUpdated":1749020412000}'),r={name:"documents/accumulation/import-from-rules.md"};function k(o,s,d,c,g,E){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="import-from-加载规则详解" tabindex="-1">Import From 加载规则详解 <a class="header-anchor" href="#import-from-加载规则详解" aria-label="Permalink to &quot;Import From 加载规则详解&quot;">​</a></h1><h2 id="问题背景" tabindex="-1">问题背景 <a class="header-anchor" href="#问题背景" aria-label="Permalink to &quot;问题背景&quot;">​</a></h2><p>在使用 <code>import</code> 语句时，经常会遇到以下疑问：</p><ul><li><strong>文件后缀问题</strong>：为什么有时候引入文件时后缀能省略，有时不能省略？</li><li><strong>index 文件问题</strong>：为什么引入某个文件夹下的 <code>index.js</code> 或 <code>index.vue</code> 时可以省略不写？</li><li><strong>加载规则</strong>：<code>import from</code> 的具体加载规则是什么？</li></ul><h2 id="解答分析" tabindex="-1">解答分析 <a class="header-anchor" href="#解答分析" aria-label="Permalink to &quot;解答分析&quot;">​</a></h2><h3 id="_1-文件后缀省略规则" tabindex="-1">1. 文件后缀省略规则 <a class="header-anchor" href="#_1-文件后缀省略规则" aria-label="Permalink to &quot;1. 文件后缀省略规则&quot;">​</a></h3><p>Vue 项目使用 <code>import ... from ...</code> 来导入组件、库、变量等。<strong>文件后缀是否可以省略取决于 webpack 的配置</strong>。</p><h4 id="webpack-配置示例" tabindex="-1">Webpack 配置示例 <a class="header-anchor" href="#webpack-配置示例" aria-label="Permalink to &quot;Webpack 配置示例&quot;">​</a></h4><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  resolve: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    extensions: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;.vue&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;.json&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    alias: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &#39;@&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;src&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="使用效果" tabindex="-1">使用效果 <a class="header-anchor" href="#使用效果" aria-label="Permalink to &quot;使用效果&quot;">​</a></h4><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 以下两种写法等价</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> test </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./test.vue&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> test </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./test&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 以下两种写法等价  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> test </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./test.js&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> test </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./test&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 注意：如果同一文件夹下同时存在 test.vue 和 test.js</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 则 .js 文件的优先级高于 .vue 文件</span></span></code></pre></div><h3 id="_2-文件夹和第三方包的加载规则" tabindex="-1">2. 文件夹和第三方包的加载规则 <a class="header-anchor" href="#_2-文件夹和第三方包的加载规则" aria-label="Permalink to &quot;2. 文件夹和第三方包的加载规则&quot;">​</a></h3><p>当 <code>from</code> 后的路径指向一个<strong>文件夹</strong>或<strong>第三方包</strong>时，按以下优先级顺序查找：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 加载优先级顺序</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (package.json 存在 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> package.main 字段存在 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> package.main 指定的文件存在) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 优先级 1：使用 package.main 指定的文件</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 注意：即使该文件格式或内容有错误，也会优先使用</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> package.main指定的文件;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (index.js 存在) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 优先级 2：使用 index.js</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;index.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 优先级 3：使用 index.vue</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;index.vue&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="_3-实际案例分析" tabindex="-1">3. 实际案例分析 <a class="header-anchor" href="#_3-实际案例分析" aria-label="Permalink to &quot;3. 实际案例分析&quot;">​</a></h3><p>以 <a href="https://github.com/PanJiaChen/vue-element-admin/blob/master/src/layout/index.vue" target="_blank" rel="noreferrer">vue-element-admin</a> 源码为例：</p><p><img src="`+t+`" alt="vue-element-admin"></p><h4 id="步骤-1-检查目标路径" tabindex="-1">步骤 1：检查目标路径 <a class="header-anchor" href="#步骤-1-检查目标路径" aria-label="Permalink to &quot;步骤 1：检查目标路径&quot;">​</a></h4><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 这里 from 的路径 &#39;./components&#39; 是一个文件夹</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { AppMain, Navbar, Settings, Sidebar, TagsView } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./components&#39;</span></span></code></pre></div><h4 id="步骤-2-查找-package-json" tabindex="-1">步骤 2：查找 package.json <a class="header-anchor" href="#步骤-2-查找-package-json" aria-label="Permalink to &quot;步骤 2：查找 package.json&quot;">​</a></h4><p><img src="`+l+'" alt="vue-element-admin"></p><p><strong>结果</strong>：<code>./components</code> 目录下没有 <code>package.json</code> 文件</p><h4 id="步骤-3-查找-index-js" tabindex="-1">步骤 3：查找 index.js <a class="header-anchor" href="#步骤-3-查找-index-js" aria-label="Permalink to &quot;步骤 3：查找 index.js&quot;">​</a></h4><p><img src="'+p+'" alt="vue-element-admin"></p><p><strong>结果</strong>：存在 <code>index.js</code> 文件，因此使用该文件作为入口</p><h4 id="步骤-4-分析-index-js-内容" tabindex="-1">步骤 4：分析 index.js 内容 <a class="header-anchor" href="#步骤-4-分析-index-js-内容" aria-label="Permalink to &quot;步骤 4：分析 index.js 内容&quot;">​</a></h4><p>从图中可以看到：</p><ul><li><strong>AppMain.vue</strong> 和 <strong>Navbar.vue</strong>：同级目录下没有同名 <code>.js</code> 文件，所以加载的是 <code>.vue</code> 文件</li><li><strong>Settings</strong>：这是一个文件夹，需要进一步按规则查找</li></ul><h4 id="步骤-5-查找-settings-文件夹" tabindex="-1">步骤 5：查找 Settings 文件夹 <a class="header-anchor" href="#步骤-5-查找-settings-文件夹" aria-label="Permalink to &quot;步骤 5：查找 Settings 文件夹&quot;">​</a></h4><p><img src="'+h+'" alt="vue-element-admin"></p><p>对于 Settings 文件夹，按照加载规则：</p><ol><li><strong>查找 package.json</strong> → ❌ 不存在</li><li><strong>查找 index.js</strong> → ❌ 不存在</li><li><strong>查找 index.vue</strong> → ✅ 存在，使用此文件</li></ol><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>理解 <code>import from</code> 的加载规则有助于：</p><ul><li>正确组织项目文件结构</li><li>避免引入路径错误</li><li>提高代码的可维护性</li></ul><p><strong>关键要点</strong>：</p><ul><li>文件后缀省略依赖于 webpack 配置</li><li>文件夹导入遵循固定的优先级规则</li><li>package.json 的 main 字段具有最高优先级</li></ul>',37)]))}const y=i(r,[["render",k]]);export{u as __pageData,y as default};
