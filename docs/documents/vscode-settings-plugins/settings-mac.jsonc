{
  // 设置全局默认代码格式化工具为 Prettier
  "editor.defaultFormatter": "esbenp.prettier-vscode",
  // 针对特定文件类型的格式化工具设置
  "[html]": {
    // HTML 文件使用 VSCode 内置的 HTML 格式化工具，而不是 Prettier
    "editor.defaultFormatter": "vscode.html-language-features"
  },
  // JSON 文件的特定编辑器设置
  "[json]": {
    // 启用字符串输入时的自动建议功能
    "editor.quickSuggestions": {
      "strings": true // 在输入 JSON 字符串值时显示智能提示
    },
    // 选择建议时使用替换模式，新选择的内容会替换当前已输入的内容
    "editor.suggest.insertMode": "replace",
    // JSON 文件也使用 Prettier 进行格式化
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  // Python 文件的特定编辑器设置
  "[python]": {
    // 在输入特定字符（如冒号、分号）时自动格式化代码
    // "editor.formatOnType": true
  },
  // Markdown 文件的特定编辑器设置
  "[markdown]": {
    // Markdown 文件使用 Prettier 进行格式化
    "editor.defaultFormatter": "esbenp.prettier-vscode",
    // 在 Markdown 文件中启用智能提示功能，便于使用代码片段和自动完成
    "editor.quickSuggestions": {
      "other": true, // 启用一般内容的智能提示
      "comments": true, // 启用注释中的智能提示
      "strings": true // 启用字符串中的智能提示
    },
    // 按 Enter 键时接受当前选中的建议项
    "editor.acceptSuggestionOnEnter": "on"
  },
  // 在输入时自动格式化代码，当输入特定字符（如分号、大括号等）时自动格式化当前行或作用域
  // "editor.formatOnType": true,
  // 文件保存时自动执行的代码操作，这里设置为自动运行 ESLint 修复所有可修复的错误和警告
  "editor.codeActionsOnSave": {
    "source.fixAll.eslint": "explicit"
  },
  // 禁用自动检测文件缩进，使用用户设置的缩进配置
  "editor.detectIndentation": false,
  // 编辑器字体大小设置为 14px
  "editor.fontSize": 14,
  // 编辑器行高设置为 18px
  "editor.lineHeight": 18,
  // 鼠标悬停提示的延迟时间，2000ms 后显示悬停信息
  "editor.hover.delay": 2000,
  // 启用内联代码建议功能（如 GitHub Copilot 等）
  "editor.inlineSuggest.enabled": true,
  // 行号显示方式设置为相对行号（当前行显示绝对行号，其他行显示相对距离）
  "editor.lineNumbers": "relative",
  // 禁用编辑器右侧的小地图（代码缩略图）
  "editor.minimap.enabled": false,
  // 代码补全建议的默认选择策略，设置为选择第一个建议项
  "editor.suggestSelection": "first",
  // 设置制表符的宽度为 2 个空格
  "editor.tabSize": 2,
  // 禁用对 Unicode 模糊字符的高亮显示
  "editor.unicodeHighlight.ambiguousCharacters": false,
  // 定义单词分隔符，用于双击选择单词或移动光标时的边界识别
  "editor.wordSeparators": "`~!@#$%^&*()=+[{]}\\|;:'\",.<>/?",
  // 启用光标平滑动画效果
  "editor.cursorSmoothCaretAnimation": "on",
  // 自动关闭括号功能设置为总是启用
  "editor.autoClosingBrackets": "always",
  // 内联建议工具栏的显示方式，设置为鼠标悬停时显示
  "editor.inlineSuggest.showToolbar": "onHover",
  // 模板字符串转换器支持的语言列表
  "template-string-converter.validLanguages": [
    "javascript",
    "typescript",
    "jsx",
    "tsx",
    "html",
    "vue",
    "svelte",
    "yaml",
    "json"
  ],
  // Prettier 代码格式化配置
  "prettier.arrowParens": "avoid", // 箭头函数参数避免使用括号（单个参数时）
  "prettier.bracketSameLine": true, // 将多行 JSX 元素的 > 放在最后一行的末尾
  "prettier.tabWidth": 2, // 设置缩进宽度为 2 个空格
  "prettier.printWidth": 120, // 每行最大字符数为 120
  "prettier.jsxSingleQuote": true, // JSX 中使用单引号代替双引号
  "prettier.singleQuote": true, // 使用单引号代替双引号
  "prettier.semi": false, // 不在语句末尾添加分号
  "prettier.bracketSpacing": true, // 在对象字面量的括号之间打印空格
  "prettier.trailingComma": "none", // 不添加尾随逗号
  "prettier.useTabs": false, // 使用空格而不是制表符进行缩进
  // 文件资源管理器配置
  "explorer.confirmDelete": false, // 删除文件时不显示确认对话框
  "explorer.confirmDragAndDrop": false, // 拖拽文件时不显示确认对话框
  // VS Code 工作区外观配置
  "workbench.colorTheme": "One Dark Pro Darker", // 使用 One Dark Pro Darker 主题
  "workbench.editor.enablePreview": false, // 禁用编辑器预览模式（单击文件直接打开编辑）
  // "workbench.editor.showTabs": "single",          // 编辑器标签页显示方式（已注释）
  "workbench.iconTheme": "material-icon-theme", // 使用 Material Icon 图标主题
  "workbench.startupEditor": "none", // 启动时不显示欢迎页面
  "workbench.tree.enableStickyScroll": true, // 启用文件树的粘性滚动功能
  // JavaScript/Node.js 调试配置
  "debug.javascript.autoAttachFilter": "smart", // 智能自动附加到 Node.js 进程进行调试
  "debug.allowBreakpointsEverywhere": true, // 允许在任何地方设置断点
  // 扩展性能优化配置
  "extensions.experimental.affinity": {
    "vscodevim.vim": 1 // 将 Vim 扩展分配到特定的进程以提高性能
  },
  // Vim 扩展基础配置
  "vim.hlsearch": true, // 启用搜索高亮显示
  "vim.easymotion": true, // 启用 EasyMotion 快速跳转功能
  "vim.sneak": true, // 启用 Sneak 双字符搜索功能
  "vim.leader": "<space>", // 设置 Leader 键为空格键
  "vim.useSystemClipboard": true, // 使用系统剪贴板
  "vim.useCtrlKeys": true, // 启用 Ctrl 键组合功能
  "vim.changeWordIncludesWhitespace": true, // 修改单词时包含空白字符
  // Vim 普通模式键位绑定配置
  "vim.normalModeKeyBindings": [
    {
      "before": ["<C-n>"],
      "commands": [":nohl"]
    },
    {
      "before": ["H"],
      "after": ["^"]
    },
    {
      "before": ["L"],
      "after": ["g", "_"]
    },
    {
      "before": ["K"],
      "after": ["h", "$", "V", "%"]
    },
    // 删除两个空格之间的字符串
    {
      "before": ["<leader>", "s"],
      "after": ["B", "d", "E", "a"]
    },
    {
      "before": ["<leader>", "t", "f"],
      "commands": [":tabfirst"]
    },
    {
      "before": ["<leader>", "t", "l"],
      "commands": [":tablast"]
    },
    {
      "before": ["<leader>", "t", "n"],
      "commands": [":tabnext"]
    },
    {
      "before": ["<leader>", "t", "p"],
      "commands": [":tabprev"]
    },
    {
      "before": ["<leader>", "1"],
      "commands": ["workbench.action.focusFirstEditorGroup"]
    },
    {
      "before": ["<leader>", "2"],
      "commands": ["workbench.action.focusSecondEditorGroup"]
    },
    {
      "before": ["<leader>", "f"],
      "commands": ["workbench.action.closeOtherEditors"]
    },
    {
      "before": ["<leader>", "i"],
      "after": ["/", "i", "m", "p", "o", "r", "t", " ", "<Enter>", "z", "z"]
    },
    {
      "before": ["<leader>", "a"],
      "after": ["/", "n", "a", "m", "e", ":", "<Enter>", "z", "z"]
    },
    {
      "before": ["<leader>", "d"],
      "after": ["/", "d", "a", "t", "a", "\\", "(", "\\", ")", "<leader>", "{", "<Enter>", "z", "z"]
    },
    {
      "before": ["<leader>", "c"],
      "after": ["/", "c", "o", "m", "p", "o", "n", "e", "n", "t", "s", ":", "<Enter>", "z", "z"]
    },
    {
      "before": ["<leader>", "p"],
      "after": ["/", "p", "r", "o", "p", "s", ":", "<Enter>", "z", "z"]
    },
    {
      "before": ["<leader>", "o"],
      "after": ["/", "c", "o", "m", "p", "u", "t", "e", "d", ":", "<Enter>", "z", "z"]
    },
    {
      "before": ["<leader>", "w"],
      "after": ["/", "w", "a", "t", "c", "h", ":", "<Enter>", "z", "z"]
    },
    {
      "before": ["<leader>", "r"],
      "after": ["/", "c", "r", "e", "a", "t", "e", "d", "<Enter>", "z", "z"]
    },
    {
      "before": ["<leader>", "m"],
      "after": ["/", "m", "o", "u", "n", "t", "e", "d", "<Enter>", "z", "z"]
    },
    {
      "before": ["<leader>", "e"],
      "after": ["/", "m", "e", "t", "h", "o", "d", "s", "<Enter>", "z", "z"]
    },
    {
      "before": ["<leader>", "l"],
      "after": ["/", "l", "a", "n", "g", "<Enter>", "z", "z"]
    }
  ],
  // Vim 普通模式非递归键位绑定配置
  "vim.normalModeKeyBindingsNonRecursive": [
    {
      "before": ["<C-j>"],
      "after": ["4", "j"]
    },
    {
      "before": ["<C-a>"],
      "after": ["9", "j"]
    },
    {
      "before": ["<C-k>"],
      "after": ["4", "k"]
    },
    {
      "before": ["<C-x>"],
      "after": ["9", "k"]
    },
    // {
    //   "before": ["<C-d>"],
    //   "commands": ["editor.action.peekDefinition"]
    // },
    // 跳到 data 位置并自动补上复制的值（快速生成对应的 data)
    {
      "before": ["q"],
      "after": [
        "y",
        "i",
        "w",
        "/",
        "d",
        "a",
        "t",
        "a",
        "\\",
        "(",
        "\\",
        ")",
        "<Enter>",
        "z",
        "z",
        "j",
        "o",
        "<C-v>",
        ":",
        "<leader>",
        ",",
        "<Esc>",
        "i"
      ]
    },
    // 快速生成对应的 methods
    {
      "before": [";"],
      "after": [
        "y",
        "i",
        "w",
        "/",
        "m",
        "e",
        "t",
        "h",
        "o",
        "d",
        "s",
        "(",
        ")",
        "<Enter>",
        "z",
        "z",
        "o",
        "<C-v>",
        "(",
        ")",
        "<leader>",
        "{",
        "}",
        ",",
        "<Esc>",
        "h",
        "i",
        "<Enter>"
      ]
    },
    // 从 template 里的 class 跳到 style 标签里的 class(右边是双引号时)
    {
      "before": ["<leader>", "j"],
      "after": ["F", "\"", "l", "v", "t", "\"", "y", "/", "<C-r>", "\"", "<leader>", "<Enter>"]
    },
    // 从 template 里的 class 跳到 style 标签里的 class(右边是空格时)
    {
      "before": ["<leader>", "n"],
      "after": [
        "F",
        "\"",
        "l",
        "v",
        "t",
        "<leader>",
        "y",
        "/",
        "<C-r>",
        "\"",
        "<leader>",
        "<Enter>"
      ]
    },
    // 从 style 标签里的 class 跳到 template 里的 class
    {
      "before": ["<leader>", "k"],
      "after": [
        "F",
        ".",
        "l",
        "v",
        "t",
        "<leader>",
        "y",
        "/",
        "class=\"(.*",
        "<C-r>",
        "\"",
        ".*)",
        "<Enter>"
      ]
    },
    {
      "before": ["w"],
      "after": ["w", "w"]
    },
    {
      "before": ["b"],
      "after": ["b", "b"]
    },
    {
      "before": ["u"],
      "after": ["<C-u>", "z", "z"]
    },
    {
      "before": ["n"],
      "after": ["*"]
    },
    {
      "before": ["<leader>", "b"],
      "commands": ["bookmarks.list"]
    },
    {
      "before": ["m"],
      "commands": ["bookmarks.toggle"]
    },
    {
      "before": [","],
      "commands": ["bookmarks.jumpToNext"]
    },
    {
      "before": ["'"],
      "commands": ["bookmarks.jumpToPrevious"]
    },
    {
      "before": ["s", "f"],
      "after": ["<Esc>", "<leader>", "<leader>", "s"]
    },
    // 快速复制颜色值
    {
      "before": ["y", "c"],
      "after": ["F", "#", "v", "6", "l", "y"]
    },
    // 复制光标所在单词到寄存器a, 同时删除这一行
    {
      "before": ["y", "r"],
      "after": ["\"", "a", "y", "i", "w", "d", "d"]
    },
    // 从当前光标所在字符复制到当前行最后一个字符
    {
      "before": ["y", "e"],
      "after": ["v", "g", "_", "y"]
    },
    // 复制两个空格之间的字符串
    {
      "before": ["y", "<leader>"],
      "after": ["B", "y", "E"]
    },
    // 复制反引号里的内容
    {
      "before": ["y", "`"],
      "after": ["F", "`", "l", "y", "t", "`"]
    },
    // 复制单引号里的内容
    {
      "before": ["y", "'"],
      "after": ["F", "'", "l", "y", "t", "'"]
    },
    // 复制双引号里的内容
    {
      "before": ["y", "\""],
      "after": ["F", "\"", "l", "y", "t", "\""]
    },
    // 粘贴上一次复制的值
    {
      "before": ["p", "c"],
      "after": ["p"]
    },
    // 粘贴a寄存器的值
    {
      "before": ["p", "p"],
      "after": ["v", "i", "w", "\"", "a", "p"]
    },
    // 将单引号里的内容删除, 并将复制的内容粘贴到单引号里
    {
      "before": ["p", "'"],
      "after": ["F", "'", "l", "h", "p", "l", "d", "t", "'"]
    },
    // 从当前位置将复制的内容粘贴到右边单引号里
    {
      "before": ["p", "t", "'"],
      "after": ["p", "l", "d", "t", "'"]
    },
    // 将双引号里的内容删除, 并将复制的内容粘贴到单引号里
    {
      "before": ["p", "\""],
      "after": ["F", "\"", "l", "h", "p", "l", "d", "t", "\""]
    },
    // 从当前位置将复制的内容粘贴到右边双引号里
    {
      "before": ["p", "t", "\""],
      "after": ["p", "l", "d", "t", "\""]
    },
    // 将反引号里的内容删除, 并将复制的内容粘贴到反引号里
    {
      "before": ["p", "`"],
      "after": ["F", "`", "l", "h", "p", "l", "d", "t", "`"]
    },
    // 从当前位置将复制的内容粘贴到右边反引号里
    {
      "before": ["p", "t", "`"],
      "after": ["p", "l", "d", "t", "`"]
    },
    // 将标签里的内容删除, 并将复制的内容粘贴到标签里
    {
      "before": ["p", "i", "t"],
      "after": ["d", "i", "t", "i", "<CR>", "<Esc>", "\"", "0", "p"]
    },
    // 往下一行粘贴复制的内容
    {
      "before": ["p", "o"],
      "after": ["o", "<C-v>"]
    },
    // 往上一行粘贴复制的内容
    {
      "before": ["p", "O"],
      "after": ["O", "<C-v>"]
    }
  ],
  // Vim 插入模式键位绑定配置
  "vim.insertModeKeyBindings": [
    {
      "before": ["<C-q>"],
      "after": ["<Enter>"]
    },
    {
      "before": ["<C-i>"],
      "after": ["<Esc>"]
    },
    {
      "before": ["j", "j"],
      "after": ["<Esc>"]
    },
    {
      "before": ["j", "k"],
      "after": ["<Esc>", "l", "a", ","]
    },
    {
      "before": ["j", "n"],
      "after": ["<Esc>", "o"]
    },
    {
      "before": ["j", ";"],
      "after": ["<Esc>", "A", ";", "<Esc>", "o"]
    },
    {
      "before": ["j", ","],
      "after": ["<Esc>", "A", ",", "<Esc>", "o"]
    },
    {
      "before": ["j", "l"],
      "after": ["right"]
    },
    {
      "before": ["<C-j>"],
      "after": ["<Esc>", "d", "d"]
    },
    {
      "before": ["<C-l>"],
      "after": ["<Esc>", "A"]
    },
    {
      "before": ["<C-h>"],
      "after": ["<Esc>", "I"]
    }
  ],
  // Vim 可视模式键位绑定配置
  "vim.visualModeKeyBindings": [
    {
      "before": ["H"],
      "after": ["^"]
    },
    {
      "before": ["L"],
      "after": ["g", "_"]
    },
    {
      "before": ["w"],
      "after": ["i", "w"]
    }
  ],
  // Vim 可视模式非递归键位绑定配置
  "vim.visualModeKeyBindingsNonRecursive": [
    // 粘贴上一次复制的值
    // {
    //   "before": ["p"],
    //   "after": ["\"", "0", "p"]
    // },
    // 复制后将光标定位到最后一个字符
    {
      "before": ["y"],
      "after": ["y", "g", "_", "%"]
    },
    {
      "before": ["<C-f>"],
      "commands": ["editor.action.startFindReplaceAction"]
    }
  ],
  // Vim 操作等待模式键位绑定配置
  "vim.operatorPendingModeKeyBindings": [
    {
      "before": ["H"],
      "after": ["^"]
    },
    {
      "before": ["L"],
      "after": ["g", "_"]
    }
  ],
  // Vim 操作等待模式非递归键位绑定配置
  "vim.operatorPendingModeKeyBindingsNonRecursive": [
    {
      "before": ["w"],
      "after": ["i", "w"]
    },
    {
      "before": ["b"],
      "after": ["i", "b"]
    },
    {
      "before": ["B"],
      "after": ["i", "B"]
    }
  ],
  // Vim 按键处理配置（禁用某些快捷键让 VSCode 原生功能生效）
  "vim.handleKeys": {
    // "<C-c>": false,               // 禁用 Ctrl+C（使用 VSCode 原生复制功能）
    "<C-v>": false, // 禁用 Ctrl+V（使用 VSCode 原生粘贴功能）
    // "<C-x>": false,               // 禁用 Ctrl+X（使用 VSCode 原生剪切功能）
    // "<C-z>": false,               // 禁用 Ctrl+Z（使用 VSCode 原生撤销功能）
    // "<C-a>": false,               // 禁用 Ctrl+A（使用 VSCode 原生全选功能）
    // "<C-f>": false,               // 禁用 Ctrl+F（使用 VSCode 原生查找功能）
    "<C-y>": false, // 禁用 Ctrl+Y（使用 VSCode 原生重做功能）
    "<C-u>": false, // 禁用 Ctrl+U（使用 VSCode 原生功能）
    "<C-p>": false // 禁用 Ctrl+P（使用 VSCode 原生快速打开功能）
  },
  // 搜索功能配置
  "search.exclude": {
    "**/node_modules": false, // 搜索时不排除 node_modules 目录
    "**/bower_components": true // 搜索时排除 bower_components 目录
  },
  // HTML 标签包装配置
  "htmltagwrap.tag": "div", // 使用 div 标签包装选中的 HTML 内容
  // 工作区安全配置
  "security.workspace.trust.untrustedFiles": "open", // 直接打开不受信任的文件
  // 文件处理配置
  "files.insertFinalNewline": true, // 保存文件时在末尾插入换行符
  "files.exclude": {
    "**/.git": false // 在文件资源管理器中显示 .git 目录
  },
  // TypeScript 编辑器配置
  "typescript.inlayHints.functionLikeReturnTypes.enabled": true, // 显示函数返回类型的内联提示
  // 源代码管理（Git）界面配置
  "scm.showIncomingChanges": "never", // 不显示传入的变更
  "scm.showOutgoingChanges": "never", // 不显示传出的变更
  "scm.showChangesSummary": false, // 不显示变更摘要
  "scm.showHistoryGraph": false, // 不显示历史图表
  // 文件大纲视图配置
  "outline.collapseItems": "alwaysCollapse" // 文件大纲中的项目总是折叠显示
}
